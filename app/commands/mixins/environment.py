from django.conf import settings

from systems.commands.index import CommandMixin
from utility.environment import Environment


class EnvironmentMixin(CommandMixin('environment')):

    @property
    def curr_env_name(self):
        return Environment.get_active_env()


    def init_environment(self):
        env = self.get_env()
        if not env or not self.data:
            self.save_env(runtime_image = None)


    def environment_field_help(self):
        defaults = Environment.get_env_defaults()
        return [
            "",
            f'{self.key_color("repo")} - environment runtime repository <{self.value_color(defaults["repo"])}>',
            f'{self.key_color("base_image")} - environment base image <{self.value_color(defaults["base_image"])}>',
            f'{self.key_color("runtime_image")} - environment runtime image <{self.value_color("autogenerated")}>',
        ]


    def get_all_env(self):
        return Environment.get_all_env()

    def get_env(self, name = None):
        return Environment.get_env(name)

    def set_env(self, name = None, **fields):
        env_name = self.curr_env_name if name is None else name
        Environment.save_env(env_name, **fields)
        Environment.set_active_env(env_name)
        Environment.save_env_vars(env_name)
        self.success(f"Successfully set environment {env_name}")

    def save_env(self, name = None, **fields):
        env_name = self.curr_env_name if name is None else name
        Environment.save_env(env_name, **fields)
        self.success(f"Successfully updated environment {env_name}")

    def delete_env(self, name = None, remove_module_path = False):
        env_name = self.curr_env_name if name is None else name
        Environment.delete_env(env_name, remove_module_path = remove_module_path)
        Environment.save_env_vars()
        self.success(f"Successfully removed environment {env_name}")


    def get_host(self, name = None):
        if not name:
            name = self.environment_host
        return self.get_instance(self._host, name, required = False)

    def create_host(self, **fields):
        name = fields.pop('name', 'temp')
        host = self._host.create(name)
        for field, value in fields.items():
            setattr(host, field, value)
        return host

    def save_host(self, **fields):
        name = fields.pop('name', self.environment_host)
        host = self.get_host(name)
        if not host:
            host = self.create_host(**{ 'name': name, **fields })
        else:
            for field, value in fields.items():
                setattr(host, field, value)
        host.save()
        return host


    def get_state(self, name, default = None):
        if instance := self.get_instance(self._state, name, required=False):
            return instance.value
        return default

    def set_state(self, name, value = None):
        self._state.store(name, value = value)

    def delete_state(self, name = None, default = None):
        value = self.get_state(name, default)
        self._state.delete(name)
        return value

    def clear_state(self):
        self._state.clear()
